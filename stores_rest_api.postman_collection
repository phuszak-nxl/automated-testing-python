{
	"info": {
		"_postman_id": "8c16d2bc-5117-4dfa-b3cb-dd2fdf7efd05",
		"name": "Stores REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "38746761"
	},
	"item": [
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.unset(\"access_token\");\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User created successfully\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.exist;\r",
							"  pm.expect(responseData.message).to.equal(\"User created successfully.\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User already registered\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(pm.response.code).to.equal(400);\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.exist;\r",
							"  pm.expect(responseData.message).to.equal(\"Username already registered.\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user\",\r\n    \"password\": \"acbxyz\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/register"
			},
			"response": []
		},
		{
			"name": "/auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"access_token\", responseData.access_token);\r",
							"\r",
							"pm.test(\"Login OK -> access_token granted\", function () {\r",
							"    pm.expect(pm.response.code).to.eq(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has access_token\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"    pm.expect(pm.response.json()).to.have.property('access_token');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time under 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"user\",\r\n    \"password\": \"acbxyz\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/auth"
			},
			"response": []
		},
		{
			"name": "/stores",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"type": "text"
					}
				],
				"url": "{{url}}/stores"
			},
			"response": []
		},
		{
			"name": "/store/test_store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"ResponseData is an object\", () => {\r",
							"     pm.expect(responseData).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Store id is returned\", () => {\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData.id).to.eq(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Store name is returned\", () => {\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData.name).to.eq(\"test_store\");\r",
							"});\r",
							"\r",
							"pm.test(\"Store items are an empty list\", () => {\r",
							"    pm.expect(responseData).to.have.property('items');\r",
							"    pm.expect(responseData.items.length).to.eq(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST req (statusCode 201)\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time < 200ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", () => {\r",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"test_store\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}/store/test_store"
			},
			"response": []
		}
	]
}